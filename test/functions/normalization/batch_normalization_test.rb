class Chainer::Functions::Normalization::BatchNormalizationFunctionTest < Test::Unit::TestCase
  data({
    test1: {
      case: {
        x: Cumo::DFloat.new(5, 3, 4, 2, 1).seq,
        gamma: Cumo::DFloat.new(3, 4).seq,
        beta: Cumo::DFloat.new(3, 4).seq
      },
      expected: Cumo::DFloat[[[[[0.0], [0.0]], [[-0.35546910762786865], [-0.3275212049484253]], [[-0.7109382152557373], [-0.6550424098968506]], [[-1.0664072036743164], [-0.9825634956359863]]], [[[-1.4218764305114746], [-1.3100848197937012]], [[-1.7773456573486328], [-1.637606143951416]], [[-2.132814407348633], [-1.9651269912719727]], [[-2.488284111022949], [-2.2926483154296875]]], [[[-2.843752861022949], [-2.6201696395874023]], [[-3.199221611022949], [-2.947690963745117]], [[-3.5546913146972656], [-3.275212287902832]], [[-3.9101600646972656], [-3.602733612060547]]]], [[[[0.0], [0.0]], [[0.3152785301208496], [0.3432263135910034]], [[0.6305570602416992], [0.6864526271820068]], [[0.9458355903625488], [1.0296789407730103]]], [[[1.2611141204833984], [1.3729052543640137]], [[1.576392650604248], [1.7161316871643066]], [[1.8916711807250977], [2.0593578815460205]], [[2.2069497108459473], [2.4025840759277344]]], [[[2.522228240966797], [2.7458105087280273]], [[2.8375067710876465], [3.0890369415283203]], [[3.152785301208496], [3.4322633743286133]], [[3.4680638313293457], [3.775489330291748]]]], [[[[0.0], [0.0]], [[0.9860261082649231], [1.0139739513397217]], [[1.9720522165298462], [2.0279479026794434]], [[2.958078384399414], [3.041921615600586]]], [[[3.9441044330596924], [4.055895805358887]], [[4.930130481719971], [5.069869518280029]], [[5.916156768798828], [6.083843231201172]], [[6.902182579040527], [7.097817420959473]]], [[[7.888208866119385], [8.111791610717773]], [[8.874235153198242], [9.125764846801758]], [[9.860260963439941], [10.139739036560059]], [[10.84628677368164], [11.15371322631836]]]], [[[[0.0], [0.0]], [[1.6567736864089966], [1.6847214698791504]], [[3.313547372817993], [3.369442939758301]], [[4.970321178436279], [5.054164409637451]]], [[[6.627094745635986], [6.738885879516602]], [[8.283868789672852], [8.423606872558594]], [[9.940642356872559], [10.108328819274902]], [[11.597415924072266], [11.793050765991211]]], [[[13.254189491271973], [13.477771759033203]], [[14.91096305847168], [15.162492752075195]], [[16.567737579345703], [16.847213745117188]], [[18.224510192871094], [18.531936645507812]]]], [[[[0.0], [0.0]], [[2.327521324157715], [2.355469226837158]], [[4.65504264831543], [4.710938453674316]], [[6.982563495635986], [7.066407203674316]]], [[[9.31008529663086], [9.421876907348633]], [[11.637605667114258], [11.777345657348633]], [[13.965126991271973], [14.132814407348633]], [[16.292648315429688], [16.488285064697266]]], [[[18.62017059326172], [18.843753814697266]], [[20.947690963745117], [21.199222564697266]], [[23.275211334228516], [23.554691314697266]], [[25.602733612060547], [25.910160064697266]]]]]
      
    }
  })
  def test_forward(data)
    f = Chainer::Functions::Normalization::BatchNormalizationFunction.new
    actual = f.forward([data[:case][:x], data[:case][:gamma], data[:case][:beta]])
    expected = (data[:expected] * 10000).round / 10000
    actual_data = (actual[0] * 10000).round / 10000
    
    assert_equal(expected, actual_data)
    assert_equal(actual.size, 1)
  end

  data({
    test1: {
      case: {
        x: Cumo::DFloat.new(5, 3, 4, 2, 1).seq,
        gamma: Cumo::DFloat.new(3, 4).seq,
        beta: Cumo::DFloat.new(3, 4).seq,
        gy: Cumo::DFloat.new(5, 3, 4, 2, 1).seq,
      },
      expected: {
        gx: Cumo::DFloat[[[[[-0.0], [-0.0]], [[-0.1355469971895218], [-0.13275229930877686]], [[-0.2710941433906555], [-0.26550477743148804]], [[-0.4066409766674042], [-0.3982568681240082]]], [[[-0.5421879887580872], [-0.5310091376304626]], [[-0.6777349710464478], [-0.6637614369392395]], [[-0.8132824897766113], [-0.7965143322944641]], [[-0.9488295316696167], [-0.9292667508125305]]], [[[-1.0843744277954102], [-1.0620169639587402]], [[-1.2199227809906006], [-1.1947705745697021]], [[-1.3554707765579224], [-1.327523946762085]], [[-1.4910167455673218], [-1.4602751731872559]]]], [[[[-0.0], [-0.0]], [[-0.06847222149372101], [-0.06567737460136414]], [[-0.13694465160369873], [-0.13135485351085663]], [[-0.20541682839393616], [-0.19703197479248047]]], [[[-0.27388909459114075], [-0.26270928978919983]], [[-0.3423613905906677], [-0.3283866345882416]], [[-0.4108336567878723], [-0.3940645754337311]], [[-0.4793059229850769], [-0.45974200963974]]], [[[-0.5477773547172546], [-0.5254185795783997]], [[-0.6162505149841309], [-0.5910959243774414]], [[-0.6847227811813354], [-0.6567743420600891]], [[-0.75319504737854], [-0.7224505543708801]]]], [[[[-0.0], [0.0]], [[-0.0013973694294691086], [0.0013973694294691086]], [[-0.002794738858938217], [0.002794738858938217]], [[-0.004192108288407326], [0.004192108288407326]]], [[[-0.005589477717876434], [0.005589477717876434]], [[-0.00698684761300683], [0.00698684761300683]], [[-0.008384216576814651], [0.008384216576814651]], [[-0.00978158600628376], [0.00978158600628376]]], [[[-0.011179808527231216], [0.011179808527231216]], [[-0.012577285058796406], [0.012577285058796406]], [[-0.01397476065903902], [0.01397476065903902]], [[-0.01537223719060421], [0.01537223719060421]]]], [[[[0.0], [0.0]], [[0.06567732244729996], [0.06847206503152847]], [[0.13135464489459991], [0.13694454729557037]], [[0.19703197479248047], [0.20541618764400482]]], [[[0.26270928978919983], [0.2738882601261139]], [[0.3283866345882416], [0.34236031770706177]], [[0.39406394958496094], [0.4108336567878723]], [[0.4597412645816803], [0.4793059229850769]]], [[[0.5254185795783997], [0.5477765202522278]], [[0.5910959243774414], [0.616248607635498]], [[0.6567732691764832], [0.6847227811813354]], [[0.7224505543708801], [0.7531927227973938]]]], [[[[0.0], [0.0]], [[0.13275232911109924], [0.13554686307907104]], [[0.2655051052570343], [0.2710941433906555]], [[0.3982570171356201], [0.40664058923721313]]], [[[0.531009316444397], [0.5421874523162842]], [[0.6637616753578186], [0.6777343153953552]], [[0.7965152859687805], [0.8132811784744263]], [[0.9292678236961365], [0.9488280415534973]]], [[[1.0620169639587402], [1.0843749046325684]], [[1.1947691440582275], [1.2199218273162842]], [[1.3275254964828491], [1.3554686307907104]], [[1.4602733850479126], [1.4910155534744263]]]]],
        ggama: Cumo::DFloat[[322.0287170410156, 322.0287170410156, 322.0286865234375, 322.0287170410156], [322.0287170410156, 322.0287170410156, 322.0286865234375, 322.0286865234375], [322.02874755859375, 322.0287170410156, 322.0286865234375, 322.0287170410156]],
        gbeta: Cumo::DFloat[[485.0, 505.0, 525.0, 545.0], [565.0, 585.0, 605.0, 625.0], [645.0, 665.0, 685.0, 705.0]],
        gmean: nil,
        gvar: nil
      }
    }
  })
  def test_backward(data)
    f = Chainer::Functions::Normalization::BatchNormalizationFunction.new
    f.forward([data[:case][:x], data[:case][:gamma], data[:case][:beta]])
    actual = f.backward([data[:case][:x], data[:case][:gamma], data[:case][:beta]], [data[:case][:gy]])

    decimals = 3
    assert_equal(round(data[:expected][:gx], decimals), round(actual[0], decimals))
    assert_equal(round(data[:expected][:ggama], decimals), round(actual[1], decimals))
    assert_equal(round(data[:expected][:gbeta], decimals), round(actual[2], decimals))
    assert_equal(round(data[:expected][:gmean], decimals), round(actual[3], decimals))
    assert_equal(round(data[:expected][:gvar], decimals), round(actual[4], decimals))
  end

  def round(x, decimals)
    return nil if x.nil?
    t = 10 ** decimals
    (x * t).round / t
  end
end
